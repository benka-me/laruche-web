{"ast":null,"code":"var _jsxFileName = \"/Users/benka/go/src/github.com/benka-me/laruche-web/components/bee/install/install.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { solarizedDark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport css from \"./install.scss\";\nexport default (({\n  namespace\n}) => {\n  const code = `$> hive i ${namespace.getString()}`;\n  const {\n    0: done,\n    1: setDone\n  } = useState(false);\n  useEffect(() => {\n    let id;\n    if (done) id = setTimeout(() => setDone(false), 3000);\n    return () => clearTimeout(id);\n  }, [done]);\n  return __jsx(\"div\", {\n    className: css.install,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(CopyToClipboard, {\n    text: code,\n    onCopy: () => setDone(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    className: done ? css.installDone : css.installButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(SyntaxHighlighter, {\n    language: \"terminal\",\n    style: solarizedDark,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, code))), done ? __jsx(\"p\", {\n    className: css.copied,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 15\n    }\n  }, \"Copied!\") : null);\n});","map":{"version":3,"sources":["/Users/benka/go/src/github.com/benka-me/laruche-web/components/bee/install/install.tsx"],"names":["React","useEffect","useState","Prism","SyntaxHighlighter","solarizedDark","CopyToClipboard","css","namespace","code","getString","done","setDone","id","setTimeout","clearTimeout","install","installDone","installButton","copied"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,KAAK,IAAIC,iBAAlB,QAA2C,0BAA3C;AACA,SAASC,aAAT,QAA8B,+CAA9B;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,GAAP,MAAgB,gBAAhB;AAMA,gBAAe,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiC;AAC9C,QAAMC,IAAY,GAAI,aAAYD,SAAS,CAACE,SAAV,EAAsB,EAAxD;AACA,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC,KAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,EAAJ;AACA,QAAIF,IAAJ,EAAUE,EAAE,GAAGC,UAAU,CAAC,MAAMF,OAAO,CAAC,KAAD,CAAd,EAAuB,IAAvB,CAAf;AAEV,WAAO,MAAMG,YAAY,CAACF,EAAD,CAAzB;AACD,GALQ,EAKN,CAACF,IAAD,CALM,CAAT;AAOA,SACE;AAAK,IAAA,SAAS,EAAEJ,GAAG,CAACS,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAEP,IAAvB;AAA6B,IAAA,MAAM,EAAE,MAAMG,OAAO,CAAC,IAAD,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAED,IAAI,GAAGJ,GAAG,CAACU,WAAP,GAAqBV,GAAG,CAACW,aAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,iBAAD;AAAmB,IAAA,QAAQ,EAAC,UAA5B;AAAuC,IAAA,KAAK,EAAEb,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,IADH,CADF,CADF,CADF,EASGE,IAAI,GAAG;AAAG,IAAA,SAAS,EAAEJ,GAAG,CAACY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAH,GAA2C,IATlD,CADF;AAaD,CAxBD","sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { solarizedDark } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport css from \"./install.scss\";\nimport { Namespace } from \"../../../types/types\";\n\ninterface InstallProps {\n  namespace: Namespace;\n}\nexport default ({ namespace }: InstallProps) => {\n  const code: string = `$> hive i ${namespace.getString()}`;\n  const [done, setDone] = useState(false);\n\n  useEffect(() => {\n    let id: NodeJS.Timeout;\n    if (done) id = setTimeout(() => setDone(false), 3000);\n\n    return () => clearTimeout(id);\n  }, [done]);\n\n  return (\n    <div className={css.install}>\n      <CopyToClipboard text={code} onCopy={() => setDone(true)}>\n        <button className={done ? css.installDone : css.installButton}>\n          <SyntaxHighlighter language=\"terminal\" style={solarizedDark}>\n            {code}\n          </SyntaxHighlighter>\n          {/* <p className={css.copy}>copy âŽ˜</p> */}\n        </button>\n      </CopyToClipboard>\n      {done ? <p className={css.copied}>Copied!</p> : null}\n    </div>\n  );\n};\n\n"]},"metadata":{},"sourceType":"module"}