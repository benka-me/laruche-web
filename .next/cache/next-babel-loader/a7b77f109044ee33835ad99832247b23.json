{"ast":null,"code":"var _jsxFileName = \"/Users/benka/go/src/github.com/benka-me/laruche-web/graph/graphql.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport const GetHomeDocument = gql`\n    query getHome($token: String!) {\n  GetHome(input: {Token: $token}) {\n    Bees {\n      Author\n      Description\n      DevLang\n      Framework {\n        Author\n        Name\n      }\n      Keywords\n      License\n      Name\n      PkgName\n      Port\n      Repo\n      Rpcs {\n        Name\n        Input\n        Output\n        Line\n      }\n    }\n    Hives {\n      Author\n      Name\n      Repo\n    }\n  }\n}\n    `;\nexport const GetHomeComponent = props => __jsx(ApolloReactComponents.Query, _extends({\n  query: GetHomeDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 7\n  }\n}));\nexport function withGetHome(operationOptions) {\n  return ApolloReactHoc.withQuery(GetHomeDocument, _objectSpread({\n    alias: 'getHome'\n  }, operationOptions));\n}\n;\nexport const GetFullBeeDocument = gql`\n    query getFullBee($token: String!, $author: String!, $name: String!) {\n  GetFullBee(input: {Auth: {Token: $token}, Author: $author, Name: $name}) {\n    Bee {\n      Author\n      Description\n      DevLang\n      Framework {\n        Author\n        Name\n      }\n      Keywords\n      License\n      Name\n      PkgName\n      Port\n      Repo\n      Rpcs {\n        Name\n        Input\n        Output\n        Line\n      }\n    }\n    Details {\n      Readme\n    }\n  }\n}\n    `;\nexport const GetFullBeeComponent = props => __jsx(ApolloReactComponents.Query, _extends({\n  query: GetFullBeeDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 7\n  }\n}));\nexport function withGetFullBee(operationOptions) {\n  return ApolloReactHoc.withQuery(GetFullBeeDocument, _objectSpread({\n    alias: 'getFullBee'\n  }, operationOptions));\n}\n;\nexport const GetBeeDetailsDocument = gql`\n    query getBeeDetails($token: String!, $author: String!, $name: String!) {\n  GetBeeDetails(input: {Auth: {Token: $token}, Author: $author, Name: $name}) {\n    Readme\n  }\n}\n    `;\nexport const GetBeeDetailsComponent = props => __jsx(ApolloReactComponents.Query, _extends({\n  query: GetBeeDetailsDocument\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 7\n  }\n}));\nexport function withGetBeeDetails(operationOptions) {\n  return ApolloReactHoc.withQuery(GetBeeDetailsDocument, _objectSpread({\n    alias: 'getBeeDetails'\n  }, operationOptions));\n}\n;","map":{"version":3,"sources":["/Users/benka/go/src/github.com/benka-me/laruche-web/graph/graphql.tsx"],"names":["gql","React","ApolloReactComponents","ApolloReactHoc","GetHomeDocument","GetHomeComponent","props","withGetHome","operationOptions","withQuery","alias","GetFullBeeDocument","GetFullBeeComponent","withGetFullBee","GetBeeDetailsDocument","GetBeeDetailsComponent","withGetBeeDetails"],"mappings":";;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,KAAKC,qBAAZ,MAAuC,0BAAvC;AACA,OAAO,KAAKC,cAAZ,MAAgC,mBAAhC;AAmNA,OAAO,MAAMC,eAAe,GAAGJ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAA5B;AAkCH,OAAO,MAAMK,gBAAgB,GAAIC,KAAD,IAC9B,MAAC,qBAAD,CAAuB,KAAvB;AAAkE,EAAA,KAAK,EAAEF;AAAzE,GAA8FE,KAA9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK;AAKX,OAAO,SAASC,WAAT,CAA+CC,gBAA/C,EAIuB;AAC1B,SAAOL,cAAc,CAACM,SAAf,CAAiGL,eAAjG;AACLM,IAAAA,KAAK,EAAE;AADF,KAEFF,gBAFE,EAAP;AAIH;AAAA;AAED,OAAO,MAAMG,kBAAkB,GAAGX,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAA/B;AAgCH,OAAO,MAAMY,mBAAmB,GAAIN,KAAD,IACjC,MAAC,qBAAD,CAAuB,KAAvB;AAAwE,EAAA,KAAK,EAAEK;AAA/E,GAAuGL,KAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK;AAKX,OAAO,SAASO,cAAT,CAAkDL,gBAAlD,EAI0B;AAC7B,SAAOL,cAAc,CAACM,SAAf,CAA0GE,kBAA1G;AACLD,IAAAA,KAAK,EAAE;AADF,KAEFF,gBAFE,EAAP;AAIH;AAAA;AAED,OAAO,MAAMM,qBAAqB,GAAGd,GAAI;;;;;;KAAlC;AASH,OAAO,MAAMe,sBAAsB,GAAIT,KAAD,IACpC,MAAC,qBAAD,CAAuB,KAAvB;AAA8E,EAAA,KAAK,EAAEQ;AAArF,GAAgHR,KAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADK;AAKX,OAAO,SAASU,iBAAT,CAAqDR,gBAArD,EAI6B;AAChC,SAAOL,cAAc,CAACM,SAAf,CAAmHK,qBAAnH;AACLJ,IAAAA,KAAK,EAAE;AADF,KAEFF,gBAFE,EAAP;AAIH;AAAA","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type Auth = {\n  Token: Scalars['String'],\n};\n\nexport type Bee = {\n   __typename?: 'Bee',\n  Author: Scalars['String'],\n  Name: Scalars['String'],\n  PkgName: Scalars['String'],\n  Description: Scalars['String'],\n  Repo: Scalars['String'],\n  Port: Scalars['Int'],\n  License: Scalars['String'],\n  Keywords: Array<Scalars['String']>,\n  DevLang: Scalars['Int'],\n  Framework?: Maybe<Framework>,\n  Rpcs: Array<Rpc>,\n};\n\nexport type BeeDetails = {\n   __typename?: 'BeeDetails',\n  Readme: Scalars['String'],\n};\n\nexport type BeeReq = {\n  Author: Scalars['String'],\n  Name: Scalars['String'],\n  Auth: Auth,\n};\n\nexport type Framework = {\n   __typename?: 'Framework',\n  Author: Scalars['String'],\n  Name: Scalars['String'],\n};\n\nexport type FullBee = {\n   __typename?: 'FullBee',\n  Bee: Bee,\n  Details: BeeDetails,\n};\n\nexport type Hive = {\n   __typename?: 'Hive',\n  Author: Scalars['String'],\n  Name: Scalars['String'],\n  Repo: Scalars['String'],\n};\n\nexport type Home = {\n   __typename?: 'Home',\n  Bees: Array<Bee>,\n  Hives: Array<Hive>,\n};\n\nexport type HomeReq = {\n  Token: Scalars['String'],\n};\n\nexport type LoginRes = {\n   __typename?: 'LoginRes',\n  Status: Scalars['Boolean'],\n  TokenErr: Scalars['String'],\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  register: RegisterRes,\n};\n\n\nexport type MutationRegisterArgs = {\n  input: RegisterReq\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  Login: LoginRes,\n  GetHome: Home,\n  GetBee: Bee,\n  GetBeeDetails: BeeDetails,\n  GetFullBee: FullBee,\n};\n\n\nexport type QueryLoginArgs = {\n  username: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type QueryGetHomeArgs = {\n  input: HomeReq\n};\n\n\nexport type QueryGetBeeArgs = {\n  input: BeeReq\n};\n\n\nexport type QueryGetBeeDetailsArgs = {\n  input: BeeReq\n};\n\n\nexport type QueryGetFullBeeArgs = {\n  input: BeeReq\n};\n\nexport type RegisterReq = {\n  email: Scalars['String'],\n  username: Scalars['String'],\n  password: Scalars['String'],\n};\n\nexport type RegisterRes = {\n   __typename?: 'RegisterRes',\n  Status: Scalars['Boolean'],\n  StatusMessage: Scalars['String'],\n};\n\nexport type Rpc = {\n   __typename?: 'Rpc',\n  Name: Scalars['String'],\n  Input: Scalars['String'],\n  Output: Scalars['String'],\n  Line: Scalars['String'],\n};\n\nexport type GetHomeQueryVariables = {\n  token: Scalars['String']\n};\n\n\nexport type GetHomeQuery = (\n  { __typename?: 'Query' }\n  & { GetHome: (\n    { __typename?: 'Home' }\n    & { Bees: Array<(\n      { __typename?: 'Bee' }\n      & Pick<Bee, 'Author' | 'Description' | 'DevLang' | 'Keywords' | 'License' | 'Name' | 'PkgName' | 'Port' | 'Repo'>\n      & { Framework: Maybe<(\n        { __typename?: 'Framework' }\n        & Pick<Framework, 'Author' | 'Name'>\n      )>, Rpcs: Array<(\n        { __typename?: 'Rpc' }\n        & Pick<Rpc, 'Name' | 'Input' | 'Output' | 'Line'>\n      )> }\n    )>, Hives: Array<(\n      { __typename?: 'Hive' }\n      & Pick<Hive, 'Author' | 'Name' | 'Repo'>\n    )> }\n  ) }\n);\n\nexport type GetFullBeeQueryVariables = {\n  token: Scalars['String'],\n  author: Scalars['String'],\n  name: Scalars['String']\n};\n\n\nexport type GetFullBeeQuery = (\n  { __typename?: 'Query' }\n  & { GetFullBee: (\n    { __typename?: 'FullBee' }\n    & { Bee: (\n      { __typename?: 'Bee' }\n      & Pick<Bee, 'Author' | 'Description' | 'DevLang' | 'Keywords' | 'License' | 'Name' | 'PkgName' | 'Port' | 'Repo'>\n      & { Framework: Maybe<(\n        { __typename?: 'Framework' }\n        & Pick<Framework, 'Author' | 'Name'>\n      )>, Rpcs: Array<(\n        { __typename?: 'Rpc' }\n        & Pick<Rpc, 'Name' | 'Input' | 'Output' | 'Line'>\n      )> }\n    ), Details: (\n      { __typename?: 'BeeDetails' }\n      & Pick<BeeDetails, 'Readme'>\n    ) }\n  ) }\n);\n\nexport type GetBeeDetailsQueryVariables = {\n  token: Scalars['String'],\n  author: Scalars['String'],\n  name: Scalars['String']\n};\n\n\nexport type GetBeeDetailsQuery = (\n  { __typename?: 'Query' }\n  & { GetBeeDetails: (\n    { __typename?: 'BeeDetails' }\n    & Pick<BeeDetails, 'Readme'>\n  ) }\n);\n\nexport const GetHomeDocument = gql`\n    query getHome($token: String!) {\n  GetHome(input: {Token: $token}) {\n    Bees {\n      Author\n      Description\n      DevLang\n      Framework {\n        Author\n        Name\n      }\n      Keywords\n      License\n      Name\n      PkgName\n      Port\n      Repo\n      Rpcs {\n        Name\n        Input\n        Output\n        Line\n      }\n    }\n    Hives {\n      Author\n      Name\n      Repo\n    }\n  }\n}\n    `;\nexport type GetHomeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetHomeQuery, GetHomeQueryVariables>, 'query'> & ({ variables: GetHomeQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetHomeComponent = (props: GetHomeComponentProps) => (\n      <ApolloReactComponents.Query<GetHomeQuery, GetHomeQueryVariables> query={GetHomeDocument} {...props} />\n    );\n    \nexport type GetHomeProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetHomeQuery, GetHomeQueryVariables> & TChildProps;\nexport function withGetHome<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetHomeQuery,\n  GetHomeQueryVariables,\n  GetHomeProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetHomeQuery, GetHomeQueryVariables, GetHomeProps<TChildProps>>(GetHomeDocument, {\n      alias: 'getHome',\n      ...operationOptions\n    });\n};\nexport type GetHomeQueryResult = ApolloReactCommon.QueryResult<GetHomeQuery, GetHomeQueryVariables>;\nexport const GetFullBeeDocument = gql`\n    query getFullBee($token: String!, $author: String!, $name: String!) {\n  GetFullBee(input: {Auth: {Token: $token}, Author: $author, Name: $name}) {\n    Bee {\n      Author\n      Description\n      DevLang\n      Framework {\n        Author\n        Name\n      }\n      Keywords\n      License\n      Name\n      PkgName\n      Port\n      Repo\n      Rpcs {\n        Name\n        Input\n        Output\n        Line\n      }\n    }\n    Details {\n      Readme\n    }\n  }\n}\n    `;\nexport type GetFullBeeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetFullBeeQuery, GetFullBeeQueryVariables>, 'query'> & ({ variables: GetFullBeeQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetFullBeeComponent = (props: GetFullBeeComponentProps) => (\n      <ApolloReactComponents.Query<GetFullBeeQuery, GetFullBeeQueryVariables> query={GetFullBeeDocument} {...props} />\n    );\n    \nexport type GetFullBeeProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetFullBeeQuery, GetFullBeeQueryVariables> & TChildProps;\nexport function withGetFullBee<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetFullBeeQuery,\n  GetFullBeeQueryVariables,\n  GetFullBeeProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetFullBeeQuery, GetFullBeeQueryVariables, GetFullBeeProps<TChildProps>>(GetFullBeeDocument, {\n      alias: 'getFullBee',\n      ...operationOptions\n    });\n};\nexport type GetFullBeeQueryResult = ApolloReactCommon.QueryResult<GetFullBeeQuery, GetFullBeeQueryVariables>;\nexport const GetBeeDetailsDocument = gql`\n    query getBeeDetails($token: String!, $author: String!, $name: String!) {\n  GetBeeDetails(input: {Auth: {Token: $token}, Author: $author, Name: $name}) {\n    Readme\n  }\n}\n    `;\nexport type GetBeeDetailsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetBeeDetailsQuery, GetBeeDetailsQueryVariables>, 'query'> & ({ variables: GetBeeDetailsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetBeeDetailsComponent = (props: GetBeeDetailsComponentProps) => (\n      <ApolloReactComponents.Query<GetBeeDetailsQuery, GetBeeDetailsQueryVariables> query={GetBeeDetailsDocument} {...props} />\n    );\n    \nexport type GetBeeDetailsProps<TChildProps = {}> = ApolloReactHoc.DataProps<GetBeeDetailsQuery, GetBeeDetailsQueryVariables> & TChildProps;\nexport function withGetBeeDetails<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  GetBeeDetailsQuery,\n  GetBeeDetailsQueryVariables,\n  GetBeeDetailsProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, GetBeeDetailsQuery, GetBeeDetailsQueryVariables, GetBeeDetailsProps<TChildProps>>(GetBeeDetailsDocument, {\n      alias: 'getBeeDetails',\n      ...operationOptions\n    });\n};\nexport type GetBeeDetailsQueryResult = ApolloReactCommon.QueryResult<GetBeeDetailsQuery, GetBeeDetailsQueryVariables>;"]},"metadata":{},"sourceType":"module"}